#include"stdio.h"
#include "string.h"
#include "stdlib.h"
///////////////////////////////////////////////////////////////
//sym负责从输入字符串中取出下一个字符，并存入SYM中等待分析
int pE(char sym);
int	pT(char sym);
int	p_E(char sym);
int	p_T(char sym);
int	pF(char sym);
///////////////////////////////////////////////////////////////
int i=0,j=0,b=0;
char c;
char instring[20];
void fileOpen();
///////////////////////////////////////////////////////////////
//文件读取
void fileOpen()
{
	FILE *fp;
	char text[1024];
	if((fp=fopen("d:\\ex2.txt","r"))==NULL)
	{
		printf("fail to open the file\n");
	}
	while((c=fgetc(fp))!=EOF)
	{
	
		printf("%c",c);
		//将回车/换行转换为空格
		//if(c=='\r'||c=='\n') c=' ';
		instring[b++]=c;
	}
	fclose(fp);
}
///////////////////////////////////////////////////////////////

//去除STR中的首字符
char advance()
{	char cc;
	i=i+1;
	cc=instring[i];
	return cc;
}
/////////////////////////////////////////////////////////////
//E
int pE(char sym)
{	
	char xx;
	xx=sym;
	xx=pT(sym);
	xx=p_E(xx);
	return	xx;
}
/////////////////////////////////////////////////////////////
//E1
int  p_E(char sym)
{
	char s,hh;
	s=sym;
	hh=sym;
	if (sym=='+'||sym=='-')
	{	
		sym=advance();
		if(sym=='\n')
			sym=advance();
		hh=pT(sym);
		hh=p_E(hh);
	}
	else if(s==')'||s=='#'||s=='/0'||'\n')
	 { }
	 else
	 {
		// printf("error!");
		 return -1;
	 }
	 return hh;
		
}
/////////////////////////////////////////////////////////////
//T
int pT(char sym)
{	char yy;
	yy=sym;
	yy=pF(sym);
	yy=p_T(yy);
	return yy;
}
/////////////////////////////////////////////////////////////
//T1
int p_T(char sym)
{
	char s,zz;
	zz=sym;
	if (sym=='*'||sym=='/')
	{	
		s=sym;
		sym=advance();
		if(sym=='\n')
			sym=advance();
			zz=pF(sym);	
			p_T(zz);

	}	
	else if(sym==')'||sym=='#'||sym=='/0'||sym=='+'||'\n')
	 {
	}
 else
 {
	 //printf("error!");
	 return -1;
 }
	return zz;	
}
/////////////////////////////////////////////////////////////
//F
int pF(char sym)
{
	if (sym=='i')
	{	
		sym=advance();
			if(sym=='\n')
			sym=advance();
	}
	else if(sym=='(')
	{	
		sym=advance();
			if(sym=='\n')
				sym=advance();
			sym=pE(sym);
			if(sym==')')
			{
				sym=advance();
				if(sym=='\n')
					sym=advance();
			}			
		else 
		{
			//printf("error");
			return -1;
		}
	}
	else if(sym=='/0'||sym=='\n')
	{
	}
	else
	{
		//printf("error");
		return -1;
	}
	return sym;

}
/////////////////////////////////////////////////////////////
void main()
{	
	int b=0;
	char sym,c,mm;
	printf("the string is:\n");
	fileOpen();
	printf("\n");
	sym=instring[0];
		mm=pE(sym);
		if(mm=='#') 
			printf("\nright!\n");
		else
			printf("\nerror!\n");
}
